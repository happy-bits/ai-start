---
description: Kommandon
globs:
alwaysApply: true
---

# Kommandon 

## Analys & Planering

`-reason`
Analysera problem och ge detaljerad f√∂rklaring.
Fokusera p√• problemf√∂rst√•else.
Skriv i ett kodf√∂nster vilka mappar och filer du f√∂resl√•r ska skapas eller √§ndras.
√Ñndra ingen kod.

`-reason3`
Analysera problem och ger tre olika l√∂sningsf√∂rslag.
Fokus p√• problemf√∂rst√•else.
√Ñndra ingen kod.

`-question`
Analysera problem noggrant.
Beskriv hur du tolkar problemet.
√Ñndra ingen kod och f√∂resl√• ingen l√∂sning √§n.
St√§ll tre fr√•gor till anv√§ndaren f√∂r f√∂rst√• uppgiften b√§ttre.
Numrera fr√•gorna: 1, 2, 3.
Om anv√§ndaren v√§ljer att inte svara p√• ett fr√•ga s√• v√§lj sj√§lv hur uppgiften ska tolkas.

`-where`
Vilka filer och mappar √§r relevanta f√∂r sammanhanget? 
√Ñndra ingen kod och f√∂resl√• ingen l√∂sning √§n.

`-steps`
Skapa numrerad handlingsplan d√§r det framg√•r vad som ska g√∂ras och vilka steg som √§r klara:
```
‚úÖ 1. Slutf√∂rt steg
üñãÔ∏è 2. P√•g√•ende steg
```
`-steps3`
Dela upp uppgiften i 3-5 steg, d√§r varje steg kan verifieras av en slutanv√§ndare. F√∂rklara hur steget kan verifieras.

`-steps-back`
Det senaste steget √§r inte √§nnu klart. Uppdatera steget till üñãÔ∏è ist√§llet f√∂r ‚úÖ.

`-test`
Beskriv kortfattat hur jag kan verifiera koduppdateringen.

`-commit`
Skapa ett commit-meddelande utifr√•n kodf√∂r√§ndringen p√• detta format:
[feat/fix/style/chore/refactor]: [Beskrivning p√• svenska, en mening, max 100 tecken, f√∂rsta bokstaven ska vara stor, anv√§nd presens]

Exempel:
fix: Visa datum som tidzon Stockholm

Om kodf√∂r√§ndringarna passar som en commit s√• skriv
‚úÖ Passar som en commit
Annars skriv
‚ö†Ô∏è Rekommenderar att dela upp i flera commits p.g.a [...]

Anropa inga verktyg.

`-summary`
Sammanfatta vad vi kommit fram till.
√Ñndra vad vi kommit fram till.

## Debugging

`-debug-css`
 Modifiera CSS-koden tillf√§lligt f√∂r att identifiera problemet:
- T.ex l√§gg till ramar i olika f√§rger och storlekar
- L√§gg till en kommentar med 'ü§°' n√§ra f√∂r√§ndringen, s√• att vi l√§tt kan hitta √§ndringen
- N√§r problemet √§r l√∂st kommer vi ta bort dessa CSS-f√∂r√§ndringar

`-debug-log`
F√∂r att underl√§tta fels√∂kning, l√§gg till loggning p√• flera st√§llen:
- L√§gg till loggning p√• servern och inled varje meddlande med 'ü§°'
- L√§gg till loggning p√• klienten och inled varje meddlande med 'ü§°'

`-debug-log-remove`
Ta bort alla tillf√§lliga debug-loggar (s√∂k efter 'ü§°')

## Implementation

`-code [x]`
Implementera specificerat steg. 
Om [x] utel√§mnas, implementera n√§sta steg i ordningen.
Beskriv hur jag kan verifiera att implementationen st√§mmer.

`-tdd [x]`
Implementera med Test Driven Utveckling.
Om [x] utel√§mnas, implementera n√§sta steg i ordningen.
B√∂rja med att skapa test. Bekr√§fta att testat failar. Beskriv sedan hur testet fungerar.
Implementering ingenting f√∂rutom testerna.
Ta inte bort n√•got befintligt test.
Fr√•ga mig sedan: "Vill du att jag implementerar detta?"


`-code-unit [x]`
Implementera specificerat steg.
Om [x] utel√§mnas, implementeras n√§sta steg i ordningen.
Skapa enhetstest f√∂r att verifiera implementationen.

`-debug-see`
Jag bifogar ett fel. 
Ser du felet? 
Beskriv hur du tolkar felet.
√Ñndra ingen kod.

`-bug`

Anv√§ndaren vill rapportera om en bugg.

F√∂lj dessa steg, st√§ll en fr√•ga i taget:

1) Fr√•ga vad anv√§ndare g√∂r
2) Fr√•ga vad som h√§nde
3) Fr√•ga vad f√∂rv√§ntades

Skapa en markdownfil under mappen "Buggrapport" som beskriver buggen tydligt

Fr√•ga sedan anv√§ndaren om buggen ska l√∂sas

## Prompt

`-prompt-better`

I min tidigare fr√•ga bad jag dig utf√∂ra en uppgift, men du missade en detalj, vilket du sedan korrigerade.

Hur skulle jag ha formulerat instruktionen f√∂r att s√§kerst√§lla att du f√∂rstod uppgiften korrekt fr√•n b√∂rjan? 

## Refaktorering

`-analyze-readable`
Analysera om koden kan g√∂ra enklare att l√§sa och f√∂rst√•.
√Ñndra ingen kod.

`-analyze-reuse`
Analysera om koden kan g√∂ras mer modul√§r och √•teranv√§ndningsbar.
√Ñndra ingen kod.

`-analyze-duplication`
Analysera koden utifr√•n duplicering. 
Finns det kod som √§r duplicerad eller g√∂r samma sak? 
√Ñndra ingen kod.

`-analyze-consistency`
Analysera koden utifr√•n om den √§r konsistens.
√Ñndra ingen kod.

`-analyze-dead`
Identifiera oanv√§nd kod.
T.ex oanv√§nda funktioner och klasser, √∂verfl√∂diga importer.
√Ñndra ingen kod

## Mallar

`-template`
Skapa en markdownfil summary.md som beskriver uppgiften och hur du l√∂ste den. Syftet √§r att instruktionen ska fungera som st√∂d f√∂r en AI-assistent i framtiden, vid l√∂sning av liknande problem. F√∂lj nedanst√•ende mall:
```
# Rubrik

## Typ av √§ndring
- [ ] Feature
- [ ] Buggfix
- [ ] Refaktorering
- [ ] Dokumentation
- [ ] Annat

## Beskrivning
En kort sammanfattning av vad √§ndringen inneb√§r (1 mening)

## Detaljer
- Lista √∂ver specifika √§ndringar
- En punkt per √§ndring
- Fokusera p√• vad som gjorts och varf√∂r

## Relaterade filer
- Lista √∂ver √§ndrade filer
- Ange fullst√§ndiga s√∂kv√§gar

```

`-script`
Generera ett skript, en funktion med parameterar, som kan anv√§ndas f√∂r att generera liknande kod i framtiden. 

`-script3`
Generera ett skript, en funktion med parameterar, som kan anv√§ndas f√∂r att generera liknande kod i framtiden.  
Ge f√∂rst tre olika f√∂rslag.


## Dokumentation

`-diagram-er`
Skapa ett ER-diagram i mermaid-format, svara i ett kodblock.

`-overview`

Analysera hela projektet. Skapa en √∂versikt √∂ver projektet och l√§gg svaret i en ny fil `overview.md` med f√∂ljande inneh√•ll:

```markdown
# Projektets namn

## Syfte

Beskriv med max 3 meningar

## Struktur

Beskriv med max 3 meningar

Skapa ett mermaid-diagram (graph TD) som visar systemarkitekturen med klienten √∂verst

## Komponenter

Beskriv de viktigaste komponenterna

## Tekniska val

Lista med tekniker

## Utvecklingsmilj√∂

## Verktyg och Paket
Lista med verktyg och paket
```

